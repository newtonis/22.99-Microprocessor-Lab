/*
 * i2c.c
 *
 *  Created on: Sep 16, 2019
 *      Author: martinamaspero
 */
#include "i2c.h"
#include "board.h"

static I2C_Type* i2cPtrs [] = I2C_BASE_PTRS;
typedef enum {I2C_0, I2C_1, I2C_2}I2C_ChannelType;
static uint32_t simMasks[] = {SIM_SCGC4_I2C0_MASK, SIM_SCGC4_I2C1_MASK, SIM_SCGC1_I2C2_MASK};
static SIM_Type* sim_ptr = SIM;
static IRQn_Type i2c_irqs[] = I2C_IRQS;



static I2C_COM_CONTROL i2c_com;


void i2cInit (I2C_ChannelType channel, uint8_t baud_rate, uint32_t systemClock)
{

	PORT_Type * portsPtrs [] = PORT_BASE_PTRS;
	I2C_Type* i2c = i2cPtrs[channel];

	PORT_Type * port_SDA = portsPtrs[PIN2PORT(I2C_SDA)];
	uint32_t pin_SDA = PIN2NUM(I2C_SDA);

	PORT_Type * port_SCL = portsPtrs[PIN2PORT(I2C_SCL)];
	uint32_t pin_SCL = PIN2NUM(I2C_SCL);

	if (channel == I2C_2)
	{
		sim_ptr->SCGC1 |= simMasks[channel]; // activo clock gating
	}
	else
	{
		sim_ptr->SCGC4 |= simMasks[channel]; // activo clock gating
	}

	 i2c->C1 = 0x00; // I2C Control Register 1
	 i2c->C1 |= I2C_C1_IICEN_MASK; // Enables I2C module operation.
	 i2c->C1 |= I2C_C1_IICIE_MASK; // Enables I2C interrupt requests.
	 i2c->C1 |= I2C_C1_TX_MASK; // Transmit Mode Select (TRANSMIT)
	 i2c->C1 |= I2C_C1_MST_MASK; // Master Mode Select (MASTER)

	 // I2C Frequency Divider register

	 //I2C baud rate = I2C module clock speed (Hz)/(mul Ã— SCL divider)
	 i2c->F = I2C_F_MULT(0) | I2C_F_ICR(20); //  set the I2C baud rate

	 NVIC_EnableIRQ(i2c_irqs[channel]);

	 //I2C Data I/O register
	 //i2c->D = ((i2c_config.slave_address << 1) | 1);

	 port_SDA->PCR[pin_SDA] |= PORT_PCR_MUX(5); // cambia los pines a alternativa i2c
	 port_SCL->PCR[pin_SCL] |= PORT_PCR_MUX(5);

}

void I2C0_IRQHandler(void)
{
	I2C_Type* i2c = i2cPtrs[I2C_0];
	if (i2c->FLT & I2C_FLT_STOPF_MASK)
	{
		i2c->FLT |= I2C_FLT_STOPF_MASK; //Clear STOPF
		i2c->S |= I2C_S_IICIF_MASK;
		i2c_com.startCount = 0;

	}
	else
	{
		if(i2c ->FLT & I2C_FLT_STARTF_MASK)
		{
			i2c ->FLT |= I2C_FLT_STOPF_MASK; //Clear STARTF
			i2c ->S |= I2C_S_IICIF_MASK; //Clear IICIF
			i2c_com.startCount ++;

			if (startCount < 2)
			{
				return;
			}
		}
		else
		{
			i2c->S |= I2C_S_IICIF_MASK; //Clear IICIF
			if ( i2c->C1 & I2C_C1_TX_MASK) //TX mode
			{
				if (i2c_com.data_index == i2c_com.data_size) //last byte transmitted
				{
					i2c->C1 &= ~I2C_C1_MST_MASK; //generate stop signal
					return;
				}
				else
				{
					if( i2c->S & I2C_S_RXAK_MASK)
					{

					}
				}

			}

		}

	}

}
