/*
 * i2c.h
 *
 *  Created on: Sep 16, 2019
 *      Author: martinamaspero
 */

#ifndef I2C_H_
#define I2C_H_


/*******************************************************************************
 * INCLUDE HEADER FILES
 ******************************************************************************/

#include <stdint.h>




/*******************************************************************************
 * CONSTANT AND MACRO DEFINITIONS USING #DEFINE
 ******************************************************************************/





/*******************************************************************************
 * ENUMERATIONS AND STRUCTURES AND TYPEDEFS
 ******************************************************************************/

typedef struct
{
	char * data;
	unsigned char data_size; // en bytes
	unsigned char data_index;

}I2C_COM_CONTROL;


/*******************************************************************************
 * VARIABLE PROTOTYPES WITH GLOBAL SCOPE
 ******************************************************************************/

/*******************************************************************************
 * FUNCTION PROTOTYPES WITH GLOBAL SCOPE
 ******************************************************************************/

/**
 * @brief Initialize i2c driver
 * @param id i2c's number
 * @param config i2c's configuration (baudrate, parity, etc.)
*/
void i2cInit (uint8_t channel, uint8_t baud_rate, uint32_t systemClock);

/**
 * @brief Check if a new byte was received
 * @param id i2c's number
 * @return A new byte has being received
*/
uint8_t i2cIsRxMsg(uint8_t id);

/**
 * @brief Check how many bytes were received
 * @param id i2c's number
 * @return Quantity of received bytes
*/
uint8_t i2cGetRxMsgLength(uint8_t id);

/**
 * @brief Read a received message. Non-Blocking
 * @param id i2c's number
 * @param msg Buffer to paste the received bytes
 * @param cant Desired quantity of bytes to be pasted
 * @return Real quantity of pasted bytes
*/
uint8_t i2cReadMsg(uint8_t id, char* msg, uint8_t cant);

/**
 * @brief Write a message to be transmitted. Non-Blocking
 * @param id i2c's number
 * @param msg Buffer with the bytes to be transfered
 * @param cant Desired quantity of bytes to be transfered
 * @return Real quantity of bytes to be transfered
*/
uint8_t i2cWriteMsg(uint8_t id, const char* msg, uint8_t cant);

/**
 * @brief Check if all bytes were transfered
 * @param id i2c's number
 * @return All bytes were transfered
*/
uint8_t i2cIsTxMsgComplete(uint8_t id);


/*******************************************************************************
 ******************************************************************************/


#endif /* I2C_H_ */
