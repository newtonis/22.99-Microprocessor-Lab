/***************************************************************************//**
  @file     App.c
  @brief    Application functions
  @author   Nicol치s Magliola
 ******************************************************************************/

/*******************************************************************************
 * INCLUDE HEADER FILES
 ******************************************************************************/

#include "Sensores.h"

/*******************************************************************************
 * CONSTANT AND MACRO DEFINITIONS USING #DEFINE
 ******************************************************************************/


static void i2c_handler (void);
static SRAWDATA mag;
static SRAWDATA accel;
static bool end = false;


/*******************************************************************************
 * FUNCTION PROTOTYPES FOR PRIVATE FUNCTIONS WITH FILE LEVEL SCOPE
 ******************************************************************************/

void i2c_handler (void)
{
	end = true;
}
static read_data m;



void periodicRefresh(void)
{
	// Cada 1 segundo refresca uno de los par치metros
	switch (fsm) {
		case ROLL_REFRESH:
			roll_app = Position_GetRoll();
			// ENVIAR A PC NUEVO DATO POR UART
			break;
		case PITCH_REFRESH:
			pitching_app = Position_GetPitch();
			// Enviar a PC NUEVO DATO POR UART
			break;
		case ORIENT_REFRESH:
			orientation_app = Position_GetOrientation();
			// ENVIAR A PC NUEVO DATO POR UART
			break;
	}


	if(fsm == ORIENT_REFRESH)
	{
		fsm = ROLL_REFRESH;
	}
	else
	{
		fsm++;
	}
}

/*******************************************************************************
 *******************************************************************************
                        GLOBAL FUNCTION DEFINITIONS
 *******************************************************************************
 ******************************************************************************/



/* Funci칩n que se llama 1 vez, al comienzo del programa */
void App_Init (void)
{
	 gpioMode(PIN_LED_BLUE, OUTPUT);
	 gpioWrite(PIN_LED_BLUE, LED_ACTIVE);


	 /// Idea del programa final ///
	 timPeriodico = timerGetId();

	 timerStart(timPeriodico, TIMER_MS2TICKS(1000), TIM_MODE_PERIODIC, periodicRefresh);

	    ///////////////////////////////



}

/* Funci칩n que se llama constantemente en un ciclo infinito */
void App_Run (void)
{


	_mqx_ints_FXOS8700CQ_start();
	m.callback = i2c_handler;
	m.pAccelData = &accel;
	m.pMagnData = &mag;

	while(1)
	{
		ReadAccelMagnData(&m);
		while (end == false)
		{

		}
		end = false;
	}



}

